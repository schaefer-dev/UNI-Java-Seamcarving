package seamcarving.gui;

import java.awt.image.BufferedImage;
import seamcarving.SeamCarvingMain;

/**
 *
 * @author karrenberg
 *
 * Created on Oct 11, 2010, 9:58:56 AM
 *
 * @TODO: fix hardcoding of width of window-decorations (displayExtraWindow())
 * @TODO: seamcarving by manual resizing of window sometimes stops to work until invoked once via menu
 * @TODO: add functionality: show all seams colored by importance
 * @TODO: add error dialog: if no more column/row can be deleted
 */
public final class SeamCarvingFrame extends javax.swing.JFrame {

	private static final long serialVersionUID = 2415273042748244900L;

	private final SeamCarvingMain handler;
	private final ImageComponent imageComponent = new ImageComponent();
	private final ImageComponent extraWindowImageComponent = new ImageComponent();

	private int currentWindowWidth = 0;
	private int currentWindowHeight = 0;

    /** Creates new form SeamCarvingFrame */
	public SeamCarvingFrame(SeamCarvingMain handler) {
        initComponents();
		this.setSize(640, 480);
		assert (handler != null);
		this.handler = handler;
    }

	public final void updateImage(final BufferedImage image) {
		if (image == null) return;

		imageComponent.setImage(image);
		updateImageContainerSize(image.getWidth(), image.getHeight());
	}

	private void updateImageContainerSize(final int newImageWidth, final int newImageHeight) {
		final int windowToPaneWidthDiff = getWidth() - imageScrollPane.getWidth();
		final int windowToPaneHeightDiff = getHeight() - imageScrollPane.getHeight();

		// set maximum / minimum size for seam carving by resizing
		imageScrollPane.setMaximumSize( new java.awt.Dimension(newImageWidth+1, newImageHeight+1) );
		imageScrollPane.setMinimumSize( new java.awt.Dimension(newImageWidth-1, newImageHeight-1) );
		this.setMaximumSize( new java.awt.Dimension(newImageWidth+windowToPaneWidthDiff+1, newImageHeight+windowToPaneHeightDiff+1) );
		this.setMinimumSize( new java.awt.Dimension(newImageWidth+windowToPaneWidthDiff-1, newImageHeight+windowToPaneHeightDiff-1) );

		imageScrollPane.setPreferredSize( new java.awt.Dimension(newImageWidth, newImageHeight) );
		imageScrollPane.setSize( new java.awt.Dimension(newImageWidth, newImageHeight) );
		this.setPreferredSize( new java.awt.Dimension(newImageWidth+windowToPaneWidthDiff, newImageHeight+windowToPaneHeightDiff) );
		this.setSize( new java.awt.Dimension(newImageWidth+windowToPaneWidthDiff,newImageHeight+windowToPaneHeightDiff) );

		repaint();
		invalidate();
		
		currentWindowWidth = this.getWidth();
		currentWindowHeight = this.getHeight();
	}

	public final void displayExtraWindow(final BufferedImage image, final String title) {
		if (image == null) return;
		// try to avoid scroll bars if possible...
		final int widthDiff = 0; // at least for my local ubuntu :p
		final int heightDiff = extraWindow.isUndecorated() ? 3 : 29; // at least for my local ubuntu :p
		extraWindowImageComponent.setImage(image);
		extraWindow.setSize(image.getWidth()+widthDiff, image.getHeight()+heightDiff);
		extraWindow.setTitle(title);
		extraWindow.setVisible(true);
	}
	public final void closeExtraWindow() {
		extraWindow.setVisible(false);
		// this function can be called by other events than pressing the button,
		// e.g. hitting "ESC", so we make sure the checkboxes are not selected.
		toggleEnergyHorizontalCheckBoxMenuItem.setSelected(false);
		toggleEnergyVerticalCheckBoxMenuItem.setSelected(false);
		toggleEnergyLocalCheckBoxMenuItem.setSelected(false);
	}


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        extraWindow = new javax.swing.JFrame();
        extraWindowImageScrollPane = new javax.swing.JScrollPane(extraWindowImageComponent);
        imageScrollPane = new javax.swing.JScrollPane(imageComponent);
        menuBar = new javax.swing.JMenuBar();
        imageMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        deleteMenu = new javax.swing.JMenu();
        deleteVerticalMenuItem = new javax.swing.JMenuItem();
        deleteHorizontalMenuItem = new javax.swing.JMenuItem();
        deleteMenuSeparator = new javax.swing.JPopupMenu.Separator();
        deleteSingleColumnMenuItem = new javax.swing.JMenuItem();
        deleteSingleRowMenuItem = new javax.swing.JMenuItem();
        insertMenu = new javax.swing.JMenu();
        insertVerticalMenuItem = new javax.swing.JMenuItem();
        insertHorizontalMenuItem = new javax.swing.JMenuItem();
        insertMenuSeparator = new javax.swing.JPopupMenu.Separator();
        insertSingleColumnMenuItem = new javax.swing.JMenuItem();
        insertSingleRowMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        toggleEnergyVerticalCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        toggleEnergyHorizontalCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        toggleEnergyLocalCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();

        extraWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        extraWindow.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                extraWindowKeyTyped(evt);
            }
        });

        extraWindowImageScrollPane.setFocusable(false);
        extraWindowImageScrollPane.setHorizontalScrollBar(null);
        extraWindowImageScrollPane.setRequestFocusEnabled(false);

        javax.swing.GroupLayout extraWindowLayout = new javax.swing.GroupLayout(extraWindow.getContentPane());
        extraWindow.getContentPane().setLayout(extraWindowLayout);
        extraWindowLayout.setHorizontalGroup(
            extraWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addComponent(extraWindowImageScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        extraWindowLayout.setVerticalGroup(
            extraWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addComponent(extraWindowImageScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Seam Carving");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        imageScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        imageScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        imageScrollPane.setFocusable(false);
        imageScrollPane.setHorizontalScrollBar(null);
        imageScrollPane.setRequestFocusEnabled(false);

        imageMenu.setMnemonic('F');
        imageMenu.setText("Image");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setMnemonic('O');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(openMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setMnemonic('S');
        saveAsMenuItem.setText("Save As...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(saveAsMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setMnemonic('e');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(exitMenuItem);

        menuBar.add(imageMenu);

        deleteMenu.setMnemonic('D');
        deleteMenu.setText("Delete");

        deleteVerticalMenuItem.setText("Delete Columns");
        deleteVerticalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteVerticalMenuItemActionPerformed(evt);
            }
        });
        deleteMenu.add(deleteVerticalMenuItem);

        deleteHorizontalMenuItem.setText("Delete Rows");
        deleteHorizontalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHorizontalMenuItemActionPerformed(evt);
            }
        });
        deleteMenu.add(deleteHorizontalMenuItem);
        deleteMenu.add(deleteMenuSeparator);

        deleteSingleColumnMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        deleteSingleColumnMenuItem.setMnemonic('C');
        deleteSingleColumnMenuItem.setText("Delete Single Column");
        deleteSingleColumnMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSingleColumnMenuItemActionPerformed(evt);
            }
        });
        deleteMenu.add(deleteSingleColumnMenuItem);

        deleteSingleRowMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        deleteSingleRowMenuItem.setMnemonic('R');
        deleteSingleRowMenuItem.setText("Delete Single Row");
        deleteSingleRowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSingleRowMenuItemActionPerformed(evt);
            }
        });
        deleteMenu.add(deleteSingleRowMenuItem);

        menuBar.add(deleteMenu);

        insertMenu.setMnemonic('I');
        insertMenu.setText("Insert");

        insertVerticalMenuItem.setText("Insert Columns");
        insertVerticalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertVerticalMenuItemActionPerformed(evt);
            }
        });
        insertMenu.add(insertVerticalMenuItem);

        insertHorizontalMenuItem.setText("Insert Rows");
        insertHorizontalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertHorizontalMenuItemActionPerformed(evt);
            }
        });
        insertMenu.add(insertHorizontalMenuItem);
        insertMenu.add(insertMenuSeparator);

        insertSingleColumnMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        insertSingleColumnMenuItem.setMnemonic('C');
        insertSingleColumnMenuItem.setText("Insert Single Column");
        insertSingleColumnMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertSingleColumnMenuItemActionPerformed(evt);
            }
        });
        insertMenu.add(insertSingleColumnMenuItem);

        insertSingleRowMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        insertSingleRowMenuItem.setMnemonic('R');
        insertSingleRowMenuItem.setText("Insert Single Row");
        insertSingleRowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertSingleRowMenuItemActionPerformed(evt);
            }
        });
        insertMenu.add(insertSingleRowMenuItem);

        menuBar.add(insertMenu);

        viewMenu.setMnemonic('V');
        viewMenu.setText("View");

        toggleEnergyVerticalCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        toggleEnergyVerticalCheckBoxMenuItem.setText("Show Vertical Energy");
        toggleEnergyVerticalCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleEnergyVerticalCheckBoxMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(toggleEnergyVerticalCheckBoxMenuItem);

        toggleEnergyHorizontalCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        toggleEnergyHorizontalCheckBoxMenuItem.setText("Show Horizontal Energy");
        toggleEnergyHorizontalCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleEnergyHorizontalCheckBoxMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(toggleEnergyHorizontalCheckBoxMenuItem);

        toggleEnergyLocalCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        toggleEnergyLocalCheckBoxMenuItem.setText("Show Local Energy");
        toggleEnergyLocalCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleEnergyLocalCheckBoxMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(toggleEnergyLocalCheckBoxMenuItem);

        menuBar.add(viewMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
		javax.swing.JFileChooser fileDialog = new javax.swing.JFileChooser();
		fileDialog.setFileFilter( new javax.swing.filechooser.FileNameExtensionFilter("*.jpg;*.gif;*.png", "jpg", "gif", "png") );
		fileDialog.showOpenDialog( imageComponent );
		final java.io.File file = fileDialog.getSelectedFile();
		handler.loadImage(file);
	}//GEN-LAST:event_openMenuItemActionPerformed

	/*
	 * The code of this function must only be executed if a resize was performed
	 * manually by the user.
	 * Otherwise, this will result in infinite carving because this function
	 * resizes the containers, resulting in a resize-event that invokes seam
	 * carving again.
	 * TODO: sometimes, the value is negative although the user did not enlarge the window
	 */
	private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
		BufferedImage image = imageComponent.getImage();
		if (image == null) return;

		if (evt.getComponent() != this) return;

		// We have to make sure we only invoke seam carving if the resize event
		// was not caused by seam carving itself.
		if (this.getWidth() == currentWindowWidth && this.getHeight() == currentWindowHeight) return;

		final int widthDiff = imageScrollPane.getWidth() - image.getWidth();
		final int heightDiff = imageScrollPane.getHeight() - image.getHeight();

		final boolean deleteVertical = widthDiff <= 0;
		final boolean deleteHorizontal = heightDiff <= 0;
		handler.performSeamCarving(deleteVertical, deleteHorizontal, Math.abs(widthDiff), Math.abs(heightDiff));
	}//GEN-LAST:event_formComponentResized

	private void deleteVerticalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteVerticalMenuItemActionPerformed
		// The loop ensures that the dialog reappears if a bad number is given.
		while (true) {
			final String dialogResponse = (String) javax.swing.JOptionPane.showInputDialog( null,
					"How many columns should be removed?",
					"Vertical Seam Carving",
					javax.swing.JOptionPane.QUESTION_MESSAGE,
					null, null,
					50 );

			if (dialogResponse == null) return;

			final int carveAmount;
			try {
				carveAmount = Integer.parseInt(dialogResponse);
			} catch (Exception e) {
				javax.swing.JOptionPane.showMessageDialog(null, "ERROR: Amount of seams to carve has to be a number!", "ERROR: Not a number!", javax.swing.JOptionPane.ERROR_MESSAGE);
				continue;
			}

			handler.performSeamCarving(true, true, Math.abs(carveAmount), 0);
			return;
		}
	}//GEN-LAST:event_deleteVerticalMenuItemActionPerformed

	private void deleteHorizontalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHorizontalMenuItemActionPerformed
		// The loop ensures that the dialog reappears if a bad number is given.
		while (true) {
			final String dialogResponse = (String) javax.swing.JOptionPane.showInputDialog( null,
					"How many rows should be removed?",
					"Horizontal Seam Carving",
					javax.swing.JOptionPane.QUESTION_MESSAGE,
					null, null,
					50 );

			if (dialogResponse == null) return;

			final int carveAmount;
			try {
				carveAmount = Integer.parseInt(dialogResponse);
			} catch (Exception e) {
				javax.swing.JOptionPane.showMessageDialog(null, "ERROR: Amount of seams to carve has to be a number!", "ERROR: Not a number!", javax.swing.JOptionPane.ERROR_MESSAGE);
				continue;
			}

			handler.performSeamCarving(true, true, 0, Math.abs(carveAmount));
			return;
		}
	}//GEN-LAST:event_deleteHorizontalMenuItemActionPerformed

	private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
		handler.shutdown();
	}//GEN-LAST:event_exitMenuItemActionPerformed

	private void toggleEnergyHorizontalCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleEnergyHorizontalCheckBoxMenuItemActionPerformed
		if (toggleEnergyHorizontalCheckBoxMenuItem.isSelected()) {
			handler.displayEnergyImage(false, false);
		} else {
			handler.closeEnergyImage();
		}
	}//GEN-LAST:event_toggleEnergyHorizontalCheckBoxMenuItemActionPerformed

	private void toggleEnergyVerticalCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleEnergyVerticalCheckBoxMenuItemActionPerformed
		if (toggleEnergyVerticalCheckBoxMenuItem.isSelected()) {
			handler.displayEnergyImage(true, false);
		} else {
			handler.closeEnergyImage();
		}
	}//GEN-LAST:event_toggleEnergyVerticalCheckBoxMenuItemActionPerformed

	private void extraWindowKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_extraWindowKeyTyped
		if (evt.getKeyChar() != java.awt.event.KeyEvent.VK_ESCAPE) return;
		handler.closeEnergyImage();
	}//GEN-LAST:event_extraWindowKeyTyped

	private void toggleEnergyLocalCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleEnergyLocalCheckBoxMenuItemActionPerformed
		if (toggleEnergyLocalCheckBoxMenuItem.isSelected()) {
			handler.displayEnergyImage(true, true); // vertical = true/false does not matter, gives the same result
		} else {
			handler.closeEnergyImage();
		}
	}//GEN-LAST:event_toggleEnergyLocalCheckBoxMenuItemActionPerformed

	private void deleteSingleColumnMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSingleColumnMenuItemActionPerformed
		handler.performSeamCarving(true, true, 1, 0);
	}//GEN-LAST:event_deleteSingleColumnMenuItemActionPerformed

	private void deleteSingleRowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSingleRowMenuItemActionPerformed
		handler.performSeamCarving(true, true, 0, 1);
	}//GEN-LAST:event_deleteSingleRowMenuItemActionPerformed

	private void insertVerticalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertVerticalMenuItemActionPerformed
		javax.swing.JOptionPane.showMessageDialog(null, "This functionality has not yet been implemented!", "Not available", javax.swing.JOptionPane.INFORMATION_MESSAGE);
		return;
		/*
		final String dialogResponse = (String) javax.swing.JOptionPane.showInputDialog( null,
          "How many columns should be inserted?",
          "Inverse Vertical Seam Carving",
          javax.swing.JOptionPane.QUESTION_MESSAGE,
          null, null,
          50 );

		if (dialogResponse == null) return;

		final int carveAmount = Integer.parseInt(dialogResponse);

		handler.performSeamCarving(false, Math.abs(carveAmount), 0);
		*/
	}//GEN-LAST:event_insertVerticalMenuItemActionPerformed

	private void insertHorizontalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertHorizontalMenuItemActionPerformed
		javax.swing.JOptionPane.showMessageDialog(null, "This functionality has not yet been implemented!", "Not available", javax.swing.JOptionPane.INFORMATION_MESSAGE);
		return;
		/*
		final String dialogResponse = (String) javax.swing.JOptionPane.showInputDialog( null,
          "How many rows should be inserted?",
          "Inverse Horizontal Seam Carving",
          javax.swing.JOptionPane.QUESTION_MESSAGE,
          null, null,
          50 );

		if (dialogResponse == null) return;

		final int carveAmount = Integer.parseInt(dialogResponse);

		handler.performSeamCarving(false, 0, Math.abs(carveAmount));
		*/
	}//GEN-LAST:event_insertHorizontalMenuItemActionPerformed

	private void insertSingleColumnMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertSingleColumnMenuItemActionPerformed
		javax.swing.JOptionPane.showMessageDialog(null, "This functionality has not yet been implemented!", "Not available", javax.swing.JOptionPane.INFORMATION_MESSAGE);
		//handler.performSeamCarving(false, 1, 0);
	}//GEN-LAST:event_insertSingleColumnMenuItemActionPerformed

	private void insertSingleRowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertSingleRowMenuItemActionPerformed
		javax.swing.JOptionPane.showMessageDialog(null, "This functionality has not yet been implemented!", "Not available", javax.swing.JOptionPane.INFORMATION_MESSAGE);
		//handler.performSeamCarving(false, 0, 1);
	}//GEN-LAST:event_insertSingleRowMenuItemActionPerformed

	private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
		// The loop ensures that the dialog reappears if a bad file format is chosen.
		while (true) {
			javax.swing.JFileChooser fileDialog = new javax.swing.JFileChooser();
			fileDialog.setFileFilter( new javax.swing.filechooser.FileNameExtensionFilter("*.jpg;*.gif;*.png", "jpg", "gif", "png") );
			fileDialog.showSaveDialog( imageComponent );
			final java.io.File file = fileDialog.getSelectedFile();
			if (file == null) return;

			final String fileName = file.getName();
			final String fileExtension = (fileName.lastIndexOf(".")==-1) ? "" : fileName.substring(fileName.lastIndexOf(".")+1,fileName.length());

			if (fileExtension.equalsIgnoreCase("jpg") || fileExtension.equalsIgnoreCase("gif") || fileExtension.equalsIgnoreCase("png")) {
				handler.storeImage(imageComponent.getImage(), fileExtension, file);
				return;
			} else {
				javax.swing.JOptionPane.showMessageDialog(null, "ERROR: File type can only be jpg, gif, or png!", "ERROR: Unknown file type", javax.swing.JOptionPane.ERROR_MESSAGE);
			}
		}
	}//GEN-LAST:event_saveAsMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem deleteHorizontalMenuItem;
    private javax.swing.JMenu deleteMenu;
    private javax.swing.JPopupMenu.Separator deleteMenuSeparator;
    private javax.swing.JMenuItem deleteSingleColumnMenuItem;
    private javax.swing.JMenuItem deleteSingleRowMenuItem;
    private javax.swing.JMenuItem deleteVerticalMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFrame extraWindow;
    private javax.swing.JScrollPane extraWindowImageScrollPane;
    private javax.swing.JMenu imageMenu;
    private javax.swing.JScrollPane imageScrollPane;
    private javax.swing.JMenuItem insertHorizontalMenuItem;
    private javax.swing.JMenu insertMenu;
    private javax.swing.JPopupMenu.Separator insertMenuSeparator;
    private javax.swing.JMenuItem insertSingleColumnMenuItem;
    private javax.swing.JMenuItem insertSingleRowMenuItem;
    private javax.swing.JMenuItem insertVerticalMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JCheckBoxMenuItem toggleEnergyHorizontalCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem toggleEnergyLocalCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem toggleEnergyVerticalCheckBoxMenuItem;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

}


/**
 *
 * @author http://openbook.galileocomputing.de/javainsel8/
 */
final class ImageComponent extends javax.swing.JComponent {

	private static final long serialVersionUID = 7373545159250102712L;

	private BufferedImage image;

	public void setImage( BufferedImage image ) {
		if (image == null) return;
		this.image = image;
		setPreferredSize( new java.awt.Dimension(image.getWidth(), image.getHeight()) );
		setSize( new java.awt.Dimension(image.getWidth(), image.getHeight()) );
		repaint();
		invalidate();
	}
	public BufferedImage getImage() { return image; }

	@Override
	protected void paintComponent( java.awt.Graphics g ) {
		if ( image != null )
			g.drawImage( image, 0, 0, this );
	}
}
